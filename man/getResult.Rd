% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ImmuCellAI_mouse.R
\name{getResult}
\alias{getResult}
\title{Calculate Immune Cell Abundance with SSGSEA and Compensation}
\usage{
getResult(
  sample,
  data_type,
  marker_exp,
  paper_marker,
  ref_pre,
  cell_cor_new_mat,
  compensation_matrix
)
}
\arguments{
\item{sample}{Gene expression profile matrix (rows: genes, columns: samples) after filtering.}

\item{data_type}{Type of input data. One of "rnaseq" or "microarray".}

\item{marker_exp}{Reference expression matrix of cell type-specific markers (rows: genes, columns: cell types).}

\item{paper_marker}{List of cell type-specific marker genes (names = cell types, values = gene vectors).}

\item{ref_pre}{Pre-computed SSGSEA result of the reference marker expression matrix.}

\item{cell_cor_new_mat}{Cell correlation matrix (rows/columns = cell types) for initial correction.}

\item{compensation_matrix}{Pre-defined compensation matrix to adjust final abundance (reduces cross-cell interference).}
}
\value{
Transposed matrix of adjusted immune cell abundance. Rows = cell types, columns = samples.
}
\description{
Internal helper function for `ImmuCellAI_mouse`. It computes initial immune cell abundance using SSGSEA,
then adjusts the result with a pre-defined compensation matrix to reduce cross-cell interference.
}
\examples{
# Internal use only; called by ImmuCellAI_mouse()
# Load built-in reference data
data("l1_marker")
data("marker_exp")
data("l1_cell_correction_matrix_new")

# Pre-compute ref_pre with SSGSEA
ssgsea_param <- GSVA::ssgseaParam(as.matrix(marker_exp[, names(l1_marker)]), l1_marker)
ref_pre <- GSVA::gsva(ssgsea_param)

# Example filtered sample matrix
sample_filtered <- marker_exp[1:100, 1:3] # Mock sample data

# Run getResult
initial_result <- getResult(
  sample = sample_filtered,
  data_type = "rnaseq",
  marker_exp = marker_exp,
  paper_marker = l1_marker,
  ref_pre = ref_pre,
  cell_cor_new_mat = matrix(1, nrow = length(l1_marker), ncol = length(l1_marker)),
  compensation_matrix = l1_cell_correction_matrix_new
)
}
